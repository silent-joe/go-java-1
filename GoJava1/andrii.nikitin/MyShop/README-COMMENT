
21.01.2015 01:00

Goods class:

	1.  лассы именуютс€ в единственном числе
	2. ћежду методами и свойствами необходима пуста€ строка.
	
	
Goods.maxID	

	¬ java bean не нужно  использовать такой подход к генерации идентификаторов.
	
	“ак как мы грузим бины откуда-то, и пускай это что-то присваивает идентификаторы,
	в текущей реализации это GoodsStorage. ѕотому € бы удалил данный подход генерации комментариев из бинов.
	
	—оответственно изменитс€ конструктор: public Goods(int id, String category, String name) {
	protected - поскольку еще не определн список аргументов, и этот конструктор используетс€ только дл€ удобного создани€ бина в нашем хранилише, и больше ни где
	
	ƒл€ почитать и изучить: http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicInteger.html	
	
јрхитектура:

	1. Ќеобходимо создать класс, скажем ShopService(Impl) который реализовывал бы следующие методы:	
		public List<Category> getCategoryList() { ... }
		public List<Good> getGoodList(Category category) { ... }
	   использование интерфейса по желанию.
	  
	2. наш сервис по работе с данными не должен реализовывать ни каких print методов, ни каких System.out/in
	
	3. внутренее хранилище можно инициализировать так:
		private final List<Good> goods = new ArrayList<Good>() {{
			this.add(new Good(...));
			this.add(new Good(...));
		}};
		
	4. ≈сли есть желание поработать с выводом в консоль "красиво", то в main-классе реализовать следующие методы (и вызвать их из main метода):
		public static void print(List<Good> goodList, OutputStream os) {....}
		public static void print(List<Category> categoryList, OutputStream os) {....}
	
	5. резюме: бизнеслогика не должна ничего ни куда выводить, на текущий момент мы выводим только из main
	   в дальнейшем main-метод у нас исчезнет. его замен€т unit-тесты.